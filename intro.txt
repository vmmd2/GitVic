- CONFIGURAR 

  git config --global user.name "victor"   -> Configura el usuario
  git config --global user.email "victor.mendz@panel" -> Configura el email
  git config --global --list -> ver configuracion
  
- PROYECTO INICIAL

  Entrar con git bash y movernos al dir donde este nuestro proyecto
  
  git init -> marca el inicio del proyecto, para que monitoree ese directorio
  git status  -> Ver el estado del proyecto , los cambios
  git add filename.txt           -> Agregar fichero
  git add -A                     -> Agrega todo lo que tenemos
  git commit -m "mensaje"        -> guarda lo agregado antes con el add
  git log                        -> Ver los commits creados
  git checkout codigoSHAdestino  -> saltar a un commit determinado
  git checkout master            -> Mueveme al ultimo cambio
  
  git commit --ammend -m "nuevo mensaje"  -> Cambia el mendaje del ultimo commit
  
- RESET: BORRAR COMMITS
  
  git reset  --soft  xxx -> Borra commit xxx, pero no toca nuestro codigo
  git reset  --mixed xxx -> No se usa apenas
  git reset  --hard  xxx -> Borra el codigo y el commit xxx
  
  git reset --soft codigoSHAdestino  -> Mata un commit, el codigo asociado no se borra
  git reset --hard codigoSHAdestino  -> Mata un commit y el codigo asociado
  
- HELP

  git help status -> Carga la web de la ayuda del comando status
    
- RAMAS

  git branch            ->   ver ramas
  git branch rama1      ->   crea rama1 desde la que estemos situados
  git checkout rama 1   ->   nos mueve a la rama1
  git branch -D rama1   ->   Borra una la rama1
  git checkout -b rama2 ->   nos crea rama2 desde la que estemos y nos mueve a ella
  git branch   -a       ->   ver ramas y tb las ocultas
  
- FUSIONES O MERGES

  git checkout master   -> situarnos en la rama destino
  git merge    Test     ->  Master absorbe lo de Test
  
- CLONADO CON REMOTOS 
  
  git clone urirepo -> bajar un proyecto de un remoto a nuestro local 
  git remote add origin vinculoremoto -> Vincula el proyecto local con el proyecto remoto
  git remote remove origin            -> elimina el vinculo creado en el paso anterior
  git remote -v  -> Comprueba el vinculo creado
  git push origin ramalocal_a_Subir_a_Remoto -> pasa nuestros commits local al remoto
      ejemplo:  git push origin master
	  ejemplo:  git push origin master -f  ( Fuerza a subir cambios )
		
  * Si creamos una rama local (git branch rama_x) para que se suba al remoto hacer: git push origin rama_x
  
  git push origin --delete rama1  -> Elimina la rama remota rama1
 
 
- COSAS EN GIT Hub (repos en la nube)
 
  ISSUES      : Forma de solucionar o mejorar errores o cosas pdtes.
  MILLESTONES : grupos de issues que se aplican a un proyecto o periodo de tiempo
  LABELS      : Organizar diferentes tipos de problemas como bug, cambio, ....
  
- TAGS : Puntos en la historia del proy. Etiquetar un commit con una version

  git tag -a v1.0 									-> TAG al comit ultimo sin mensaje
  git tag -a v1.0 -m "mensaje" 					 	-> TAG al ultimo commit
  git tag -a v1.0 -m "mensaje" codigoSHAdelCommit  	-> TAG al comit indicado
  
  git push origin v1.0  							-> Sube tag al remoto
  git push origin --tags                            -> Sube todos los tags al remoto
 
- WORKFLOW

  git fetch origin        -> baja los cambios del remoto a la rama oculta origin/master
  git merge origin/master -> baja y combina cambios de la oculta a la rama master local
      Puede haber conflictos que arreglaremos a mano y subielos con git add y git commit 	 
  git push  origin master -> subir cambios al remoto
  
  git pull 
  
  master local   
  origin/master -> Rama oculta espejo de las dos
  master remota
	
  En un MERGE veriamos marcas de conflicto en el codigo, nos deberemos quedar con uno de los dos: 
	<<<<<<< HEAD         : nuestro Ultimo comit 
	>>>>>>> Origin/Master: los cambvios del otro compa√±ero
 
NOTA: Pulsar "Q" para ir a la linea de comandos de Git bash
  
  
  
  

  
	